name: Build libplacebo

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact_name: libplacebo-linux
            setup_deps: |
              sudo apt-get update
              sudo apt-get install -y ninja-build pkg-config python3-jinja2 \
                libvulkan-dev vulkan-validationlayers-dev spirv-tools \
                libglslang-dev spirv-cross libspirv-cross-dev \
                liblcms2-dev libshaderc-dev libxxhash-dev \
                libunwind-dev
              curl -LsSf https://astral.sh/uv/install.sh | sh
              source ~/.cargo/env
              uv tool install meson
          - os: windows-latest
            artifact_name: libplacebo-windows
            setup_deps: |
              # Install basic tools
              choco install ninja vulkan-sdk python3 git cmake
              pip install jinja2 meson
              # Setup vcpkg for dependencies
              git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
              C:\vcpkg\bootstrap-vcpkg.bat
              C:\vcpkg\vcpkg.exe install glslang:x64-windows spirv-cross:x64-windows shaderc:x64-windows lcms:x64-windows xxhash:x64-windows
              # Set environment for meson to find dependencies
              echo "PKG_CONFIG_PATH=C:\vcpkg\installed\x64-windows\lib\pkgconfig" >> $GITHUB_ENV
              echo "CMAKE_PREFIX_PATH=C:\vcpkg\installed\x64-windows" >> $GITHUB_ENV

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup dependencies
      shell: bash
      run: ${{ matrix.setup_deps }}

    - name: Install Python dependencies
      run: uv sync

    - name: Setup build directory
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          meson setup builddir --default-library=shared
        else
          uv run meson setup builddir --default-library=shared
        fi
      shell: bash

    - name: Compile  
      run: uv run meson compile -C builddir

    - name: Test
      run: uv run meson test -C builddir -v

    - name: Install
      run: uv run meson install -C builddir --destdir=install

    - name: Package artifacts (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd install
        tar -czf ../${{ matrix.artifact_name }}.tar.gz .

    - name: Package artifacts (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd install
        7z a ../${{ matrix.artifact_name }}.zip .

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          ${{ matrix.artifact_name }}.tar.gz
          ${{ matrix.artifact_name }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Upload to release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          libplacebo-linux/*.tar.gz
          libplacebo-windows/*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}