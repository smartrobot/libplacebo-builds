name: Build libplacebo

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact_name: libplacebo-linux
            setup_deps: |
              sudo apt-get update
              sudo apt-get install -y ninja-build pkg-config \
                libvulkan-dev vulkan-utility-libraries-dev spirv-tools \
                glslang-tools spirv-cross \
                liblcms2-dev libxxhash-dev libunwind-dev
              curl -LsSf https://astral.sh/uv/install.sh | sh
              source ~/.cargo/env
          - os: windows-latest
            artifact_name: libplacebo-windows
            setup_deps: |
              # Use GitHub Actions pre-installed tools where possible
              # Python3, Git, CMake are already available
              
              # Install uv
              powershell -c "irm https://astral.sh/uv/install.ps1 | iex"
              
              # Install ninja via pip (more reliable than choco)
              pip install ninja
              
              # Install Vulkan SDK using chocolatey (simpler approach)
              choco install vulkan-sdk --force --ignore-checksums
              # Set up environment manually if needed
              $VulkanPath = Get-ChildItem "C:\VulkanSDK" | Sort-Object Name -Descending | Select-Object -First 1
              if ($VulkanPath) {
                echo "VULKAN_SDK=$($VulkanPath.FullName)" >> $env:GITHUB_ENV
                echo "VK_SDK_PATH=$($VulkanPath.FullName)" >> $env:GITHUB_ENV
              }
              
              # All other dependencies handled by Meson wrap files
              echo "Using Vulkan SDK + Meson wrap files for dependencies"

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup dependencies
      shell: bash
      run: ${{ matrix.setup_deps }}

    - name: Install Python dependencies
      run: uv sync

    - name: Setup build directory
      run: uv run meson setup builddir --default-library=shared

    - name: Compile  
      run: uv run meson compile -C builddir

    - name: Test
      run: uv run meson test -C builddir -v

    - name: Install
      run: uv run meson install -C builddir --destdir=install

    - name: Package development files
      run: |
        # Create development package structure
        mkdir -p dev-package/lib dev-package/include dev-package/docs
        
        # Copy libraries
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp builddir/subprojects/libplacebo/src/*.dll dev-package/lib/ || true
          cp builddir/subprojects/libplacebo/src/*.lib dev-package/lib/ || true
          cp builddir/subprojects/libplacebo/src/*.pdb dev-package/lib/ || true
        else
          cp builddir/subprojects/libplacebo/src/*.so* dev-package/lib/ || true
        fi
        
        # Copy headers
        cp -r subprojects/libplacebo/src/include/* dev-package/include/ || true
        
        # Copy pkg-config file
        mkdir -p dev-package/lib/pkgconfig
        cp builddir/subprojects/libplacebo/libplacebo.pc dev-package/lib/pkgconfig/ || true
        
        # Copy documentation
        cp subprojects/libplacebo/README.md dev-package/docs/ || true
        cp subprojects/libplacebo/LICENSE dev-package/docs/ || true
        
        # Create comprehensive usage guide
        cat > dev-package/README.txt << 'EOF'
        libplacebo Development Package
        =============================
        
        Cross-platform GPU-accelerated video/image rendering library
        
        Directory Structure:
        - lib/          : Shared libraries (.so/.dll) and import libraries (.lib)
        - include/      : C/C++ header files
        - docs/         : Documentation and license
        - lib/pkgconfig/: pkg-config files for build systems
        
        Usage Examples:
        
        Linux (GCC):
        gcc -I./include -L./lib -lplacebo myapp.c
        
        Linux (pkg-config):
        gcc $(pkg-config --cflags --libs ./lib/pkgconfig/libplacebo.pc) myapp.c
        
        Windows (MSVC):
        cl /I.\include myapp.c .\lib\placebo.lib
        
        Windows (MinGW):
        gcc -I./include -L./lib -lplacebo myapp.c
        
        CMake Integration:
        find_library(PLACEBO_LIBRARY NAMES placebo PATHS ${CMAKE_CURRENT_SOURCE_DIR}/lib)
        target_include_directories(myapp PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/include)
        target_link_libraries(myapp ${PLACEBO_LIBRARY})
        
        Features Included:
        - Vulkan rendering backend
        - SPIR-V shader compilation
        - Advanced color processing
        - HDR tone mapping
        - Custom shader support
        
        For documentation visit: https://libplacebo.org/
        EOF
        
        # Create version info file
        echo "libplacebo $(cat subprojects/libplacebo/VERSION 2>/dev/null || echo 'unknown')" > dev-package/VERSION
        echo "Built on: $(date)" >> dev-package/VERSION
        echo "Platform: ${{ matrix.os }}" >> dev-package/VERSION
        echo "Architecture: x86_64" >> dev-package/VERSION
      shell: bash

    - name: Package artifacts (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd dev-package
        tar -czf ../${{ matrix.artifact_name }}.tar.gz .

    - name: Package artifacts (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd dev-package
        7z a ../${{ matrix.artifact_name }}.zip .

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          ${{ matrix.artifact_name }}.tar.gz
          ${{ matrix.artifact_name }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Upload to release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          libplacebo-linux/*.tar.gz
          libplacebo-windows/*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}